//*****************************************************************************
//
// ゲーム処理 [game.cpp]
// Author : SUZUKI FUUTA
//
//*****************************************************************************
//-----------------------------------------------------------------------------
// インクルードファイル
//-----------------------------------------------------------------------------
#include "game.h"
#include "result.h"

#include "manager.h"
#include "sound.h"
#include "fade.h"
#include "keyinput.h"

#include "player.h"

#include "scene2D.h"

#include "time.h"
#include "move.h"

//-----------------------------------------------------------------------------
// マクロ変数
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// 静的メンバ変数
//-----------------------------------------------------------------------------

//=============================================================================
// コンストラクタ
//=============================================================================
CGame::CGame() : CScene(OBJ_NONE)
{
	m_pNote = NULL;
}

//=============================================================================
// デストラクタ
//=============================================================================
CGame::~CGame()
{
}

//=============================================================================
// ゲームの生成
//=============================================================================
CGame * CGame::Create(void)
{
	// メモリ確保
	CGame* pGame = new CGame;
	
	// NULLチェック
	if (pGame != NULL)
	{
		// 初期化処理
		pGame->Init();
	}

	return pGame;
}

//=============================================================================
// 初期化
//=============================================================================
HRESULT CGame::Init(void)
{
	// サウンドクラスのポインタ
	CSound *pSound = CManager::GetSound();

	if (m_pNote == NULL)
	{
		m_pNote = CMesh3D::Create(4, 4, D3DXVECTOR3(0.0f, 0.0f, 0.0f), D3DXVECTOR3(200.0f, 0.0f, 200.0f));
	}


	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CGame::Uninit(void)
{
	// サウンドクラスのポインタ
	CSound *pSound = CManager::GetSound();

	// サウンドの停止
	pSound->StopSound();

	m_pNote->Uninit();

	// オブジェクトの破棄
	Release();
}

//=============================================================================
// 更新処理
//=============================================================================
void CGame::Update(void)
{
	// キー入力クラスのポインタ
	CKey *pKey = CManager::GetKey();
	// フェード情報
	CFade::FADE Fade = CFade::GetFade();

	fTime++;

	m_pNote->VtxPos(4, fHeight);

	m_pNote->MeshWave(m_WaveCenter, fTime);

	if (pKey->GetState(CKey::STATE_PRESSE, DIK_NUMPAD8))
	{
		fHeight+=1.5f;
	}
	if (pKey->GetState(CKey::STATE_PRESSE, DIK_NUMPAD2))
	{
		fHeight -= 1.5f;
	}
	if (pKey->GetState(CKey::STATE_PRESSE, DIK_W))
	{
		m_WaveCenter.z++;
	}
	if (pKey->GetState(CKey::STATE_PRESSE, DIK_A))
	{
		m_WaveCenter.x--;
	}
	if (pKey->GetState(CKey::STATE_PRESSE, DIK_S))
	{
		m_WaveCenter.z--;
	}
	if (pKey->GetState(CKey::STATE_PRESSE, DIK_D))
	{
		m_WaveCenter.x++;
	}

	if (pKey->GetState(CKey::STATE_TRIGGER, DIK_SPACE) && Fade == CFade::FADE_NONE)
	{
		// リザルトシーンに移動
		CManager::GetFade()->SetFade(CManager::MODE_RESULT);
	}

}

//=============================================================================
// 描画処理
//=============================================================================
void CGame::Draw(void)
{
	
}
