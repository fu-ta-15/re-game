//##################################################################################################################################################################//
//
// プレイヤー処理 [player.cpp]
// Author : SUZUKI FUUTA
//
//##################################################################################################################################################################//


//---------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//インクルードファイル　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------//
#include "game.h"
#include "enemy.h"
#include "player.h"
#include "backscreen.h"
#include "input.h"
#include "bullet.h"
#include "enemy.h"
#include "explosion.h"
#include "score.h"
#include "sound.h"
#include "fade.h"
#include "objct.h"
#include "hp.h"
#include "pause.h"
#include "time.h"
#include "enemyobj.h"


//---------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//グローバル変数　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------//
bool g_bPause;	//ポーズ
int g_nCuntTime;

//=====================================================================================================================================================================//
//ゲームの初期化処理                                                                                                                
//=====================================================================================================================================================================//
HRESULT InitGame(MODE mode)
{
	g_bPause = false;
	g_nCuntTime = 120;

	//背景の初期化処理
	InitBackScreen();

	//ポリゴンの初期化設定
	InitPlayer(mode);

	//弾の初期化設定
	InitBullet();

	//爆発の初期化設定
	InitExplosion();

	//敵の初期化設定
	InitEnemy();

	//オブジェクトの初期化処理
	InitObjct();

	//体力ゲージの初期化処理
	InitHp();

	//スコアの初期化設定
	InitScore();

	//タイムの初期化
	InitTime();

	//ポーズの初期化処理
	InitPause();

	//敵オブジェクトの初期化
	InitEnObjct();

	PlaySound(SOUND_LABEL_BGM001);

	return S_OK;
}

//=====================================================================================================================================================================//
//ゲームの終了処理
//=====================================================================================================================================================================//
void UninitGame(void)
{
	//サウンド停止
	StopSound();

	//背景の終了処理
	UninitBackScreen();

	//ポリゴンの終了処理
	UninitPlayer();

	//弾の終了処理
	UninitBullet();

	//爆発の終了処理
	UninitExplosion();

	//敵の終了処理
	UninitEnemy();

	//オブジェクトの終了処理
	UninitObjct();

	//体力ゲージの終了処理
	UninitHp();

	//スコアの終了処理
	UninitScore();

	//タイムの終了処理
	UninitTime();

	//敵オブジェクトの終了処理
	UninitEnObjct();

	//ポーズの終了処理
	UninitPause();

	StopSound(SOUND_LABEL_BGM001);	//BGM
}

//=====================================================================================================================================================================//
//ゲームの更新処理
//=====================================================================================================================================================================//
void UpdateGame(void)
{
	FADE pFade;
	pFade = GetFade();
	g_nCuntTime--;

	//ポーズ開始
	if (GetKeyboardTrigger(DIK_P) == true && pFade == FADE_NONE)
	{//Pが押されたとき
		g_bPause = g_bPause ? false : true;	//falseかtrueに切り替える
	}
	if (g_bPause == true)
	{//ポーズ中
		UpdatePause();
	}
	else
	{
		if (g_nCuntTime <= 0)
		{
			//背景の更新処理
			UpdateBackScreen();

			//ポリゴンの更新処理
			UpdatePlayer();

			//弾の更新処理
			UpdateBullet();

			//敵の更新処理
			UpdateEnemy();

			//オブジェクトの更新処理
			UpdateObjct();

			//体力ゲージの更新
			UpdateHp();

			//敵オブジェクトの更新処理
			UpdateEnObjct();

			//爆発の更新処理
			UpdateExplosion();

			//スコアの更新処理
			UpdateScore();

			//タイムの更新処理
			UpdateTime();

			//フェイドの更新処理
			UpdateFade();

			if (pFade == FADE_NONE)
			{
				if (GetKeyboardTrigger(DIK_RETURN) == true)
				{
					SetFade(FADE_OUT, MODE_RANKING);
				}
			}

		}
	}
}

//=====================================================================================================================================================================//
//ゲームの描画処理
//=====================================================================================================================================================================//
void DrawGame(void)
{
	//背景の描画
	DrawBackScreen();

	//Hpゲージの描画処理
	DrawHp();

	//オブジェクトの描画処理
	DrawObjct();

	//敵の描画処理
	DrawEnemy();

	//敵オブジェクトの描画処理
	DrawEnObjct();

	//弾の描画処理
	DrawBullet();

	//ポリゴンの描画処理
	DrawPlayer();

	//爆発の描画処理
	DrawExplosion();

	//スコアの描画処理
	DrawScore();

	//タイムの描画処理
	DrawTime();

	//ポーズの描画
	if (g_bPause == true)
	{//TRUEの場合
		DrawPause();
	}
}

//=====================================================================================================================================================================//
//ポーズのセット
//=====================================================================================================================================================================//
void SetPause(bool bPause)
{
	g_bPause = bPause;
}

