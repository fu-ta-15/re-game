//##################################################################################################################################################################//
//																																									//
// ライト処理 [light.cpp]																																			//
// Author : SUZUKI FUUTA																																			//
//																																									//
//##################################################################################################################################################################//



//------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//　インクルードファイル
//------------------------------------------------------------------------------------------------------------------------------------------------------------------//
#include "light.h"

//------------------------------------------------------------------------------------------------------------------------------------------------------------------//
// マクロ
//------------------------------------------------------------------------------------------------------------------------------------------------------------------//
#define MAX_LIGHT	(4)

//------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//グローバル変数
//------------------------------------------------------------------------------------------------------------------------------------------------------------------//
D3DLIGHT9 g_light[MAX_LIGHT];

//==================================================================================================================================================================//
// 初期化処理
//==================================================================================================================================================================//
void Initlight(void)
{
	LPDIRECT3DDEVICE9 pDevice;	// デバイスへのポインタ
	D3DXVECTOR3 vecDir[MAX_LIGHT];			// 設定用方向ベクトル

	// デバイスの取得
	pDevice = GetDevice();
	for (int nCntLight = 0; nCntLight < MAX_LIGHT; nCntLight++)
	{
		// ライトをクリアにする
		ZeroMemory(&g_light[nCntLight], sizeof(D3DLIGHT9));

		switch (nCntLight)
		{
		case 0:
			// ライトの種類を設定
			g_light[nCntLight].Type = D3DLIGHT_DIRECTIONAL;
			// ライトの拡散光を設定
			g_light[nCntLight].Diffuse = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);
			// ライトの方向を設定
			vecDir[nCntLight] = D3DXVECTOR3(0.0f, -0.8f, 0.4f);
			D3DXVec3Normalize(&vecDir[nCntLight], &vecDir[nCntLight]);	// 正規化する
			g_light[nCntLight].Direction = vecDir[nCntLight];
			break;

		case 1:
			// ライトの種類を設定
			g_light[nCntLight].Type = D3DLIGHT_DIRECTIONAL;
			// ライトの拡散光を設定
			g_light[nCntLight].Diffuse = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);
			// ライトの方向を設定
			vecDir[nCntLight] = D3DXVECTOR3(0.0f, 0.8f, 0.0f);
			D3DXVec3Normalize(&vecDir[nCntLight], &vecDir[nCntLight]);	// 正規化する
			g_light[nCntLight].Direction = vecDir[nCntLight];
			break;

		case 2:
			// ライトの種類を設定
			g_light[nCntLight].Type = D3DLIGHT_DIRECTIONAL;
			// ライトの拡散光を設定
			g_light[nCntLight].Diffuse = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);
			// ライトの方向を設定
			vecDir[nCntLight] = D3DXVECTOR3(-0.5f, -0.3f, -0.2f);
			D3DXVec3Normalize(&vecDir[nCntLight], &vecDir[nCntLight]);	// 正規化する
			g_light[nCntLight].Direction = vecDir[nCntLight];
			break;

		case 3:
			// ライトの種類を設定
			g_light[nCntLight].Type = D3DLIGHT_DIRECTIONAL;
			// ライトの拡散光を設定
			g_light[nCntLight].Diffuse = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);
			// ライトの方向を設定
			vecDir[nCntLight] = D3DXVECTOR3(0.5f, 0.3f, 0.0f);
			D3DXVec3Normalize(&vecDir[nCntLight], &vecDir[nCntLight]);	// 正規化する
			g_light[nCntLight].Direction = vecDir[nCntLight];
			break;

		default:
			break;
		}

		// ライトを設定する
		pDevice->SetLight(nCntLight, &g_light[nCntLight]);
		// ライトを有効にする
		pDevice->LightEnable(nCntLight, TRUE);

	}
}

//=====================================================================================================================================================================//
// 終了処理
//=====================================================================================================================================================================//
void Uninitlight(void)
{

}

//=====================================================================================================================================================================//
// 更新処理
//=====================================================================================================================================================================//
void Updatelight(void)
{

}
