//##################################################################################################################################################################//
//
// 当たり判定処理 [Collision.cpp]
// Author : SUZUKI FUUTA
//
//##################################################################################################################################################################//

//------------------------------------------------------------------------------------------------------------------------------------------------------------------//
// インクルードファイル
//------------------------------------------------------------------------------------------------------------------------------------------------------------------//
#include "model.h"
#include "bullet.h"
#include "meshwall.h"
#include "meshfield.h"
#include "collision.h"

//------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//マクロ変数
//------------------------------------------------------------------------------------------------------------------------------------------------------------------//


//------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//プロトタイプ宣言
//------------------------------------------------------------------------------------------------------------------------------------------------------------------//
CollPlayer g_cPlayer;	 // プレイヤー
CollBullet g_cBullet;	 // 弾


//=====================================================================================================================================================================//
// 情報の取得
//=====================================================================================================================================================================//
void UpdatePos(void)
{
	// 構造体の情報取得
	Player *pPlayer = GetPlayer();
	BULLET *pBullet = GetBullet();	

	// プレイヤーの当たり判定領域
	g_cPlayer.CollPlayerMax = D3DXVECTOR3(pPlayer->pos.x + pPlayer->aModel[0].g_VtxMaxModel.x, pPlayer->pos.y, pPlayer->pos.z + pPlayer->aModel[0].g_VtxMaxModel.z);
	g_cPlayer.CollPlayerMin = D3DXVECTOR3(pPlayer->pos.x - pPlayer->aModel[0].g_VtxMaxModel.x, pPlayer->pos.y, pPlayer->pos.z - pPlayer->aModel[0].g_VtxMaxModel.z);

	// 弾の当たり判定の領域
	g_cBullet.CollBulletMax = D3DXVECTOR3(pBullet->pos.x, pBullet->pos.y, pBullet->pos.z);
}

//=====================================================================================================================================================================//
// 当たり判定の処理
//=====================================================================================================================================================================//
void PlayerCollision(void)
{
	// 各構造体のポインタ
	Player *pPlayer = GetPlayer();			 // プレイヤー
	MeshWall *pMeshWall = GetMeshWall();	 // 壁
	Meshfield *pMeshfield = GetMeshfield();	 // 床

	// ステージ全体の移動可能領域
	if (g_cPlayer.CollPlayerMax.x > LENGTH_POLYGON_X)
	{
		pPlayer->pos.x = LENGTH_POLYGON_X - pPlayer->aModel[0].g_VtxMaxModel.x;
	}
	if (g_cPlayer.CollPlayerMin.x < -LENGTH_POLYGON_X)
	{
		pPlayer->pos.x = -LENGTH_POLYGON_X - pPlayer->aModel[0].g_VtxMinModel.x;
	}
	if (g_cPlayer.CollPlayerMax.z > LENGTH_POLYGON_Z)
	{
		pPlayer->pos.z = LENGTH_POLYGON_Z - pPlayer->aModel[0].g_VtxMaxModel.z;
	}
	if (g_cPlayer.CollPlayerMin.z < -LENGTH_POLYGON_Z)
	{
		pPlayer->pos.z = -LENGTH_POLYGON_Z - pPlayer->aModel[0].g_VtxMinModel.z;
	}



}
//=====================================================================================================================================================================//
// 当たり判定の処理
//=====================================================================================================================================================================//
void BulletCollision(void)
{
	// 各構造体のポインタ
	BULLET *pBullet = GetBullet();			 // 弾
	MeshWall *pMeshWall = GetMeshWall();	 // 壁
	Meshfield *pMeshfield = GetMeshfield();	 // 床

}


//=====================================================================================================================================================================//
// 当たり判定の処理
//=====================================================================================================================================================================//
//=====================================================================================================================================================================//
// 当たり判定の処理
//=====================================================================================================================================================================//








